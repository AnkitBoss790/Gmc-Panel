<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= server.name %> - GMC Panel</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <%- include('partials/header') %>

  <div class="container">
    <div class="page-header">
      <h1><%= server.name %></h1>
      <span class="status-badge status-<%= server.status %>"><%= server.status %></span>
    </div>

    <div class="server-controls">
      <button onclick="startServer()" class="btn-success" id="startBtn">‚ñ∂ Start</button>
      <button onclick="stopServer()" class="btn-danger" id="stopBtn">‚èπ Stop</button>
      <button onclick="restartServer()" class="btn-warning" id="restartBtn">üîÑ Restart</button>
      <button onclick="deleteServer()" class="btn-danger">üóëÔ∏è Delete</button>
    </div>

    <div class="server-stats">
      <div class="stat-item">
        <span class="label">CPU Usage:</span>
        <span class="value" id="cpuUsage">--</span>
      </div>
      <div class="stat-item">
        <span class="label">Memory:</span>
        <span class="value" id="memoryUsage">--</span>
      </div>
      <div class="stat-item">
        <span class="label">Uptime:</span>
        <span class="value" id="uptime">--</span>
      </div>
      <div class="stat-item">
        <span class="label">Port:</span>
        <span class="value"><%= server.port %></span>
      </div>
    </div>

    <div class="console-container">
      <h2>Server Console</h2>
      <div class="console" id="console">
        <div class="console-line">[GMC Panel] Console ready...</div>
      </div>
      <div class="console-input">
        <input type="text" id="commandInput" placeholder="Enter command...">
        <button onclick="sendCommand()" class="btn-primary">Send</button>
      </div>
    </div>

    <div class="server-info-section">
      <h2>Server Information</h2>
      <table class="info-table">
        <tr>
          <td>Server ID:</td>
          <td><%= server.id %></td>
        </tr>
        <tr>
          <td>Type:</td>
          <td><%= server.server_type %></td>
        </tr>
        <tr>
          <td>Memory Allocated:</td>
          <td><%= server.memory %> MB</td>
        </tr>
        <tr>
          <td>Created:</td>
          <td><%= new Date(server.created_at).toLocaleString() %></td>
        </tr>
      </table>
    </div>
  </div>

  <script>
    const serverId = <%= server.id %>;

    async function startServer() {
      try {
        const res = await fetch(`/servers/${serverId}/start`, { method: 'POST' });
        const data = await res.json();
        if (data.success) location.reload();
      } catch (error) {
        alert('Error starting server');
      }
    }

    async function stopServer() {
      try {
        const res = await fetch(`/servers/${serverId}/stop`, { method: 'POST' });
        const data = await res.json();
        if (data.success) location.reload();
      } catch (error) {
        alert('Error stopping server');
      }
    }

    async function restartServer() {
      try {
        const res = await fetch(`/servers/${serverId}/restart`, { method: 'POST' });
        const data = await res.json();
        if (data.success) {
          addConsoleLog('[GMC Panel] Server restarting...');
          setTimeout(() => location.reload(), 3000);
        }
      } catch (error) {
        alert('Error restarting server');
      }
    }

    async function deleteServer() {
      if (!confirm('Are you sure you want to delete this server?')) return;
      
      try {
        const res = await fetch(`/servers/${serverId}`, { method: 'DELETE' });
        const data = await res.json();
        if (data.success) {
          alert('Server deleted successfully');
          window.location.href = '/servers';
        }
      } catch (error) {
        alert('Error deleting server');
      }
    }

    async function sendCommand() {
      const input = document.getElementById('commandInput');
      const command = input.value.trim();
      
      if (!command) return;

      addConsoleLog(`> ${command}`);
      input.value = '';

      try {
        const res = await fetch(`/api/servers/${serverId}/command`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ command })
        });
        const data = await res.json();
        if (data.output) addConsoleLog(data.output);
      } catch (error) {
        addConsoleLog('[ERROR] Failed to send command');
      }
    }

    function addConsoleLog(text) {
      const console = document.getElementById('console');
      const line = document.createElement('div');
      line.className = 'console-line';
      line.textContent = `[${new Date().toLocaleTimeString()}] ${text}`;
      console.appendChild(line);
      console.scrollTop = console.scrollHeight;
    }

    // Load server stats
    setInterval(async () => {
      try {
        const res = await fetch(`/api/servers/${serverId}/status`);
        const data = await res.json();
        document.getElementById('cpuUsage').textContent = data.cpu + '%';
        document.getElementById('memoryUsage').textContent = data.memory + ' MB';
        document.getElementById('uptime').textContent = Math.floor(data.uptime / 60) + ' min';
      } catch (error) {
        console.error('Failed to load stats');
      }
    }, 5000);

    // Command input enter key
    document.getElementById('commandInput').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') sendCommand();
    });
  </script>
</body>
</html>